using AzRanger.Models;
using AzRanger.Models.ExchangeOnline;

namespace AzRanger.Checks.Rules
{
    [RuleMeta("EXONotifcationUsersSendingMalware", ScopeEnum.EXO, MaturityLevel.Mature, "https://security.microsoft.com/antimalwarev2")]
    [CISM365("4.11", "", Level.L1, "v1.4")]
    [RuleInfo("No one is notified if a user sends potential malicious mails", "Sending malicious mails is often an indication of an infected computer. Thus, not notifying admins in the case, increases the investigation time.", 5, "https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/configure-anti-malware-policies?view=o365-worldwide", null, "See reference.")]
    class EXONotifcationUsersSendingMalware : BaseCheck
    {
        public override CheckResult Audit(Tenant tenant)
        {
            foreach(MalwareFilterPolicy policy in tenant.ExchangeOnlineSettings.MalwareFilterPolicy)
            {
                if(policy.EnableInternalSenderAdminNotifications == true && policy.InternalSenderAdminAddress.Length > 0)
                {
                    // If it is implemented in Default Policy => Good because we cannot disable it
                    if (policy.Id.Equals("Default"))
                    {
                        return CheckResult.NoFinding;
                    }
                    else
                    {
                        // If it is not enabled in Default Policy, we need to check if FilterRule is enabled
                        foreach(MalwareFilterRule rule in tenant.ExchangeOnlineSettings.MalwareFilterRule)
                        {
                            if (policy.Identity.Equals(rule.Identity))
                            {
                                if (rule.State.Equals("Enabled"))
                                {
                                    return CheckResult.NoFinding;
                                }
                            }
                        }
                    }
                }
            }
            return CheckResult.Finding;
        }
    }
}
